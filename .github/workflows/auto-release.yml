name: Auto Release

on:
  workflow_run:
    workflows: ["Build and Test"]
    types:
      - completed
    branches:
      - main

permissions:
  contents: write
  pull-requests: write

jobs:
  auto-release:
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Get current version
        id: current_version
        run: |
          # Get the latest tag
          LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
          echo "latest_tag=$LATEST_TAG" >> $GITHUB_OUTPUT
          echo "Current version: $LATEST_TAG"

      - name: Determine version bump
        id: version_bump
        run: |
          # Get commit messages since last tag
          LATEST_TAG=${{ steps.current_version.outputs.latest_tag }}
          
          if [ "$LATEST_TAG" == "v0.0.0" ]; then
            COMMITS=$(git log --format=%B)
          else
            COMMITS=$(git log $LATEST_TAG..HEAD --format=%B)
          fi
          
          # Determine bump type based on commit messages
          if echo "$COMMITS" | grep -qE "^(feat|feature)(\(.+\))?!:"; then
            BUMP_TYPE="major"
          elif echo "$COMMITS" | grep -qE "^(feat|feature)(\(.+\))?:"; then
            BUMP_TYPE="minor"
          else
            BUMP_TYPE="patch"
          fi
          
          echo "bump_type=$BUMP_TYPE" >> $GITHUB_OUTPUT
          echo "Bump type: $BUMP_TYPE"

      - name: Calculate new version
        id: new_version
        run: |
          CURRENT_VERSION=${{ steps.current_version.outputs.latest_tag }}
          BUMP_TYPE=${{ steps.version_bump.outputs.bump_type }}
          
          # Remove 'v' prefix
          VERSION=${CURRENT_VERSION#v}
          
          # Split version
          IFS='.' read -r MAJOR MINOR PATCH <<< "$VERSION"
          
          # Bump version
          case $BUMP_TYPE in
            major)
              MAJOR=$((MAJOR + 1))
              MINOR=0
              PATCH=0
              ;;
            minor)
              MINOR=$((MINOR + 1))
              PATCH=0
              ;;
            patch)
              PATCH=$((PATCH + 1))
              ;;
          esac
          
          NEW_VERSION="v${MAJOR}.${MINOR}.${PATCH}"
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "New version: $NEW_VERSION"

      - name: Generate changelog
        id: changelog
        run: |
          LATEST_TAG=${{ steps.current_version.outputs.latest_tag }}
          NEW_VERSION=${{ steps.new_version.outputs.new_version }}
          
          # Generate changelog
          echo "# Changelog for $NEW_VERSION" > changelog.md
          echo "" >> changelog.md
          
          if [ "$LATEST_TAG" == "v0.0.0" ]; then
            git log --format="- %s (%h)" >> changelog.md
          else
            git log $LATEST_TAG..HEAD --format="- %s (%h)" >> changelog.md
          fi
          
          # Store changelog in output
          CHANGELOG=$(cat changelog.md)
          echo "changelog<<EOF" >> $GITHUB_OUTPUT
          echo "$CHANGELOG" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Create and push tag
        run: |
          NEW_VERSION=${{ steps.new_version.outputs.new_version }}
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git tag -a $NEW_VERSION -m "Release $NEW_VERSION"
          git push origin $NEW_VERSION
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Trigger release workflow
        run: |
          # Manually trigger the release workflow for the new tag
          gh workflow run release.yml \
            --ref ${{ steps.new_version.outputs.new_version }} \
            --repo ${{ github.repository }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}